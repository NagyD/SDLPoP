cmake_minimum_required(VERSION 2.8)
project(SDLPoP)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -std=gnu99")

# have CMake output binaries to the directory that contains the source files
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${SDLPoP_SOURCE_DIR}/..")

# SDLPoP requires the SDL2 development libraries.
# You can pass the SDL2 location to CMake like so: -DSDL2="C:/work/libraries/SDL2-2.0.8"
# Or alternatively, specify the SDL2 location below:

#set(SDL2 "C:/work/libraries/SDL2-2.0.8")

# On macOS, if you used Homebrew to install SDL2, the location may be something like this:

#set(SDL2 "/usr/local/Cellar/sdl2/2.0.5")

# If you don't specify the location of SDL2, this script will try to guess the location,
# or retrieve it using the sdl2-config utility.

if (WIN32)
    if (MSVC)
        # Don't let Visual Studio run CMake
        message(SEND_ERROR "To build using MSVC on Windows, you can use NMake or run build.bat.")
        return()
    endif()

    # Use the -mwindows compiler flag when compiling with MinGW to hide the console window
    # Only do this when not in debug mode
    if (NOT (CMAKE_BUILD_TYPE STREQUAL "Debug"))
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mwindows")
    endif (NOT (CMAKE_BUILD_TYPE STREQUAL "Debug"))

    # If the location of SDL2 is not specified, we will try to guess it.
    if (NOT(DEFINED SDL2))
        cmake_policy(SET CMP0015 NEW) # suppress warning about relative paths
        set(SDL2 "../../SDL2-2.0.8")
    endif()

    # Automatically detect whether we need the x86 or x64 version of the SDL2 library.
    if (CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(SDL2_ARCH "x86_64-w64-mingw32")
    else()
        set(SDL2_ARCH "i686-w64-mingw32")
    endif()

    include_directories(${SDL2}/${SDL2_ARCH}/include)
    link_directories(${SDL2}/${SDL2_ARCH}/lib)
else()
    if (DEFINED SDL2)
        include_directories(${SDL2}/include)
        link_directories(${SDL2}/lib)
    else()
        execute_process(COMMAND sdl2-config --prefix OUTPUT_VARIABLE SDL2_PREFIX)
        string(STRIP ${SDL2_PREFIX} SDL2_PREFIX)
        include_directories(${SDL2_PREFIX}/include)
        link_directories(${SDL2_PREFIX}/lib)
    endif()
endif()

set(SOURCE_FILES
        main.c
        common.h
        config.h
        data.c
        data.h
        proto.h
        types.h
        seg000.c
        seg001.c
        seg002.c
        seg003.c
        seg004.c
        seg005.c
        seg006.c
        seg007.c
        seg008.c
        seg009.c
        seqtbl.c
        options.c
        midi.c opl3.c opl3.h
        replay.c
        lighting.c
        screenshot.c
        menu.c
        stb_vorbis.c
        icon.rc
        )

if (NOT(APPLE AND CREATE_BUNDLE))
    add_executable(prince ${SOURCE_FILES})
else()

    # macOS-specific:
    # By default, a normal binary executable will be created.
    # If you want an Application Bundle instead, pass CREATE_BUNDLE to CMake like so: -DCREATE_BUNDLE=1

    set(MACOSX_BUNDLE_ICON_FILE            "icon.icns")
    set_source_files_properties(${MACOSX_BUNDLE_ICON_FILE} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mmacosx-version-min=10.4")
    set(CMAKE_C_LINK_FLAGS "${CMAKE_C_LINK_FLAGS} -headerpad_max_install_names")
    add_executable(prince MACOSX_BUNDLE ${SOURCE_FILES} ${MACOSX_BUNDLE_ICON_FILE})
    set_target_properties(prince PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${CMAKE_SOURCE_DIR}/Info.plist)

    # If you want to copy the data files from another folder, pass this to CMake: -DDATA_DIRECTORY=<path>.
    if (NOT (DEFINED DATA_DIRECTORY))
        set(DATA_DIRECTORY ${CMAKE_SOURCE_DIR}/../data)
    endif()
    # Copy the data files, documentation and SDLPoP.ini into the bundle
    set(BUNDLE_BINARY_DIR "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/prince.app/Contents/MacOS")
    add_custom_command(TARGET prince POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_directory ${DATA_DIRECTORY} ${BUNDLE_BINARY_DIR}/data)
    add_custom_command(TARGET prince POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/../doc ${BUNDLE_BINARY_DIR}/doc)
    add_custom_command(TARGET prince POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/../SDLPoP.ini ${BUNDLE_BINARY_DIR}/SDLPoP.ini)
    # Copy the .dylib file for SDL2 into the prince.app/Contents/MacOS folder.
    add_custom_command(TARGET prince POST_BUILD COMMAND cp -f `otool -L ${BUNDLE_BINARY_DIR}/prince | grep SDL2- | cut -d' ' -f1` "${BUNDLE_BINARY_DIR}/libSDL2-2.0.0.dylib")
    # Modify the executable, so that the program loads the packaged .dylib files, instead of looking in e.g. /usr/local/opt
    add_custom_command(TARGET prince POST_BUILD COMMAND install_name_tool -change `otool -L "${BUNDLE_BINARY_DIR}/prince" | grep SDL2- | cut -d' ' -f1` @executable_path/libSDL2-2.0.0.dylib "${BUNDLE_BINARY_DIR}/prince")

endif()

if(WIN32)
    target_link_libraries(prince mingw32 SDL2main SDL2 SDL2.dll)
else()
    target_link_libraries(prince SDL2main SDL2 m)
endif()
